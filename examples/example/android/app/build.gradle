// Autogenerated by Klutter
// Do not edit directly
// See: https://buijs.dev/klutter

import dev.buijs.klutter.core.*

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def klutterGradleFile = new File("${projectDir}/../../klutter.gradle")
if (!klutterGradleFile.exists()) {
    throw new GradleException("File not found $klutterGradleFile")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply from: "$klutterGradleFile"

def secrets = Klutter.secrets(project)

android {
    compileSdkVersion project.ext["androidCompileSdk"].toInteger()

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
       applicationId project.ext["applicationId"]
       minSdkVersion project.ext["androidMinSdk"].toInteger()
       targetSdkVersion project.ext["androidTargetSdk"].toInteger()
       versionCode project.ext["appVersionCode"].toInteger()
       versionName project.ext["appVersionName"]
    }

    signingConfigs {
        release {
           storeFile file(secrets.get("store.file.uri") ?: project.projectDir)
           storePassword secrets.get("store.password") ?: ""
           keyAlias secrets.get("key.alias") ?: ""
           keyPassword secrets.get("key.password") ?: ""
        }
    }

    buildTypes {

        release {
            minifyEnabled true
        }

        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }

    }
}

flutter {
    source '../..'
}

dependencies {
    runtimeOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:${project.ext["kotlinxVersion"]}"
    implementation project(":platform")
    implementation "dev.buijs.klutter:core:${project.ext["klutterVersion"]}"
}
