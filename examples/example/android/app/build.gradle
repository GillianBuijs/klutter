// Autogenerated by Klutter
// Do not edit directly
// See: https://buijs.dev/klutter

import dev.buijs.klutter.core.*

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def propertiesFile = new File("${projectDir}/../../buildSrc/buildsrc.properties")
if (!propertiesFile.exists()) {
    throw new GradleException("File not found $propertiesFile")
}

def properties = new Properties()
propertiesFile.withReader('UTF-8') { reader ->
    properties.load(reader)
}

def appId = properties.getProperty('app.id')
if (appId == null) {
    throw new GradleException("ApplicationId not found. Define app.id in buildSrc/buildsrc.properties")
}

def minSdk = properties.getProperty('android.sdk.min')
if (minSdk == null) {
    throw new GradleException("Android min SDK version not found. Define android.sdk.min in buildSrc/buildsrc.properties")
}

def targetSdk = properties.getProperty('android.sdk.target')
if (targetSdk == null) {
    throw new GradleException("Android target SDK version not found. Define android.target.sdk in buildSrc/buildsrc.properties")
}

def compileSdk = properties.getProperty('android.sdk.compile')
if (compileSdk == null) {
    throw new GradleException("Android compile SDK version not found. Define android.compile.sdk in buildSrc/buildsrc.properties")
}

def appVersionCode = properties.getProperty('app.version.code')
if (appVersionCode == null) {
    throw new GradleException("App version code not found. Define app.version.code in buildSrc/buildsrc.properties")
}

def appVersionName = properties.getProperty('app.version.name')
if (appVersionName == null) {
    throw new GradleException("App version name not found. Define app.version.name in buildSrc/buildsrc.properties")
}

def klutter = properties.getProperty('klutter')
if (klutter == null) {
    throw new GradleException("Klutter version not found. Define klutter in buildSrc/buildsrc.properties")
}

def kotlin = properties.getProperty('kotlin')
if (kotlin == null) {
    throw new GradleException("Kotlin version not found. Define kotlin in buildSrc/buildsrc.properties")
}

def kotlinxCoroutinesVersion = properties.getProperty('kotlinxCoroutinesVersion')
if (kotlinxCoroutinesVersion == null) {
    throw new GradleException("Kotlinx Coroutines version not found. Define kotlinxCoroutinesVersion in buildSrc/buildsrc.properties")
}      

def secrets = Klutter.secrets(project)

android {
    compileSdkVersion compileSdk.toInteger()

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId appId
        minSdkVersion minSdk.toInteger()
        targetSdkVersion targetSdk.toInteger()
        versionCode appVersionCode.toInteger()
        versionName appVersionName
    }

    signingConfigs {
        release {
           storeFile file(secrets.get("store.file.uri") ?: project.projectDir)
           storePassword secrets.get("store.password") ?: ""
           keyAlias secrets.get("key.alias") ?: ""
           keyPassword secrets.get("key.password") ?: ""
        }
    }

    buildTypes {

        release {
            minifyEnabled true
        }

        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }

    }
}

flutter {
    source '../..'
}

dependencies {
    runtimeOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinxCoroutinesVersion"
    implementation files("../.klutter/platform-release.aar")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin"
    implementation "dev.buijs.klutter:core:$klutter"
    implementation "dev.buijs.klutter:annotations-kmp-android:$klutter"
}
