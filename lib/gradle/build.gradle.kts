import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    kotlin("jvm")
    id("com.gradle.plugin-publish") version "1.2.1"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("java-gradle-plugin")
    id("groovy")
    id("klutter")
}

group = "dev.buijs.klutter"
version = dev.buijs.klutter.ProjectVersions.gradle

sourceSets {
    main {
        java {
            srcDirs("${projectDir.absolutePath}/src/main/kotlin")
        }
    }

    test {
        java {
            srcDirs(
                "${projectDir.absolutePath}/src/test/kotlin",
                "${projectDir.absolutePath}/src/test/groovy")
        }
    }
}

publishing {
    repositories {
        mavenLocal()
        maven {
            url = dev.buijs.klutter.Repository.endpoint
            credentials {
                username = dev.buijs.klutter.Repository.username
                password = dev.buijs.klutter.Repository.password
            }
        }
    }

    publications {
        create<MavenPublication>("maven") {
            groupId = "dev.buijs.klutter"
            artifactId = "gradle"
            version = dev.buijs.klutter.ProjectVersions.gradle
            from(components.findByName("java"))

            pom {
                name.set("Klutter: Gradle Plugin")
                description.set("Gradle plugin for the Klutter Framework")
                url.set("https://buijs.dev/klutter/")

                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://github.com/buijs-dev/klutter/blob/main/LICENSE")
                    }
                }

                developers {
                    developer {
                        id.set("buijs-dev")
                        name.set("Gillian Buijs")
                        email.set("info@buijs.dev")
                    }
                }

                scm {
                    connection.set("git@github.com:buijs-dev/klutter.git")
                    developerConnection.set("git@github.com:buijs-dev/klutter.git")
                    url.set("https://github.com/buijs-dev/klutter")
                }
            }
        }
    }
}

gradlePlugin {
    isAutomatedPublishing = true
    plugins {
        create("klutterGradlePlugin") {
            id = "dev.buijs.klutter"
            displayName = "Klutter plugin to generate boilerplate for connecting Flutter and Kotlin Multiplatform"
            description = "Klutter is a framework and tool set which uses Flutter to create the frontend and " +
                    "Kotlin Multiplatform for the backend. The connective layer is generated by the Klutter framework. " +
                    "This plugin contains all tasks needed to run a Klutter Project."
            implementationClass = "dev.buijs.klutter.gradle.KlutterGradlePlugin"
        }
    }
}

dependencies {
    // Project
    implementation(project(":lib:kore"))

    // Kotlin: Required to check if Kotlin Multiplatform plugin is applied
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.10")

    // KSP Compiler plugin
    implementation("com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:1.9.10-1.0.13")

    // Jackson XML/YAML parsing
    implementation("com.fasterxml.jackson.core:jackson-databind:2.14.2")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.14.2")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.2")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2")

    // Logging
    implementation("org.slf4j:slf4j-api:2.0.7")
    implementation("io.github.microutils:kotlin-logging:3.0.5")

    // Test
    testImplementation(project(":lib-test"))

}

tasks.withType<ShadowJar> {
    archiveClassifier.set("")
    archiveVersion.set("")
}

tasks.withType<Test> {
    useJUnitPlatform()
}

tasks.register("copyKlutterProperties", Copy::class) {
    from(project.rootProject.rootDir.resolve("lib-build/src/main/resources/publish.properties"))
    into(project.projectDir.resolve("src/main/resources"))
}