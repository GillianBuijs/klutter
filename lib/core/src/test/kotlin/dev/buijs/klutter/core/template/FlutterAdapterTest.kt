/* Copyright (c) 2021 - 2022 Buijs Software
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

package dev.buijs.klutter.core.template

import dev.buijs.klutter.core.shared.Method
import dev.buijs.klutter.core.fooBarMethods
import dev.buijs.klutter.core.templates.FlutterAdapter
import dev.buijs.klutter.core.verify
import io.kotlintest.shouldBe
import io.kotlintest.specs.WordSpec

class FlutterAdapterTest: WordSpec({

    "Using the FlutterAdapter" should {

        "fallback to defaults" {
            //given:
            val methods: List<Method> = fooBarMethods()
            val adapter = FlutterAdapter(
                methods = methods,
                messages = emptyList(),
                enumerations = emptyList(),
            )

            //expect:
            verify(adapter, expected1) shouldBe true
        }

        "override defaults" {
            //given:
            val methods: List<Method> = fooBarMethods()
            val adapter = FlutterAdapter(
                pluginClassName = "MyPlugin",
                methodChannelName = "channeling",
                methods = methods,
                messages = emptyList(),
                enumerations = emptyList(),
            )

            //expect:
            verify(adapter, expected2) shouldBe true
        }

    }
})

private const val expected1 = """import 'dart:async';
import 'dart:convert';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:klutter/klutter.dart';

/// Autogenerated by Klutter Framework. 
/// 
/// Do net edit directly, but recommended to store in VCS.
/// 
/// Adapter class which handles communication with the KMP library.
class Adapter {
  static const MethodChannel _channel = MethodChannel('KLUTTER');
  
            
  static Future<AdapterResponse<String>> doFooBar(State caller, {
    void Function(String)? onSuccess,
    void Function(Exception)? onFailure,
    void Function()? onNullValue,
    void Function(AdapterResponse<String>)? onComplete,
  }) async {

    try {
    final json = await _channel.invokeMethod('doFooBar');
      final value = json.toString();
      final AdapterResponse<String> response = 
          AdapterResponse.success(value);

      if(caller.mounted) {
        onComplete?.call(response);      
          onSuccess?.call(value);
      }

      return response;
      
    } catch (e) {
      
      final exception = e is Error 
          ? Exception(e.stackTrace) 
          : e as Exception;
      
      final AdapterResponse<String> response = 
          AdapterResponse.failure(exception);

      if(caller.mounted) {
        onComplete?.call(response);
        onFailure?.call(exception);
      }

      return response;
    }
  }

  static Future<AdapterResponse<int>> notDoFooBar(State caller, {
    void Function(int)? onSuccess,
    void Function(Exception)? onFailure,
    void Function()? onNullValue,
    void Function(AdapterResponse<int>)? onComplete,
  }) async {

    try {
    final json = await _channel.invokeMethod('notDoFooBar');
      final value = json.toInt();
      final AdapterResponse<int> response = 
          AdapterResponse.success(value);

      if(caller.mounted) {
        onComplete?.call(response);      
          onSuccess?.call(value);
      }

      return response;
      
    } catch (e) {
      
      final exception = e is Error 
          ? Exception(e.stackTrace) 
          : e as Exception;
      
      final AdapterResponse<int> response = 
          AdapterResponse.failure(exception);

      if(caller.mounted) {
        onComplete?.call(response);
        onFailure?.call(exception);
      }

      return response;
    }
  }

  static Future<AdapterResponse<List<Complex>>> complexityGetter(State caller, {
    void Function(List<Complex>)? onSuccess,
    void Function(Exception)? onFailure,
    void Function()? onNullValue,
    void Function(AdapterResponse<List<Complex>>)? onComplete,
  }) async {

    try {
         
               final jsonResponse = await _channel.invokeMethod('complexityGetter');
      final json = jsonDecode(jsonResponse);
      final value = List<Complex>.from(json.map((o) => Complex.fromJson(o)));
      final AdapterResponse<List<Complex>> response = 
          AdapterResponse.success(value);

      if(caller.mounted) {
        onComplete?.call(response);      
          onSuccess?.call(value);
      }

      return response;
      
    } catch (e) {
      
      final exception = e is Error 
          ? Exception(e.stackTrace) 
          : e as Exception;
      
      final AdapterResponse<List<Complex>> response = 
          AdapterResponse.failure(exception);

      if(caller.mounted) {
        onComplete?.call(response);
        onFailure?.call(exception);
      }

      return response;
    }
  }

}"""


private const val expected2 = """import 'dart:async';
import 'dart:convert';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:klutter/klutter.dart';

/// Autogenerated by Klutter Framework. 
/// 
/// Do net edit directly, but recommended to store in VCS.
/// 
/// Adapter class which handles communication with the KMP library.
class MyPlugin {
  static const MethodChannel _channel = MethodChannel('channeling');
  
            
  static Future<AdapterResponse<String>> doFooBar(State caller, {
    void Function(String)? onSuccess,
    void Function(Exception)? onFailure,
    void Function()? onNullValue,
    void Function(AdapterResponse<String>)? onComplete,
  }) async {

    try {
    final json = await _channel.invokeMethod('doFooBar');
      final value = json.toString();
      final AdapterResponse<String> response = 
          AdapterResponse.success(value);

      if(caller.mounted) {
        onComplete?.call(response);      
          onSuccess?.call(value);
      }

      return response;
      
    } catch (e) {
      
      final exception = e is Error 
          ? Exception(e.stackTrace) 
          : e as Exception;
      
      final AdapterResponse<String> response = 
          AdapterResponse.failure(exception);

      if(caller.mounted) {
        onComplete?.call(response);
        onFailure?.call(exception);
      }

      return response;
    }
  }

  static Future<AdapterResponse<int>> notDoFooBar(State caller, {
    void Function(int)? onSuccess,
    void Function(Exception)? onFailure,
    void Function()? onNullValue,
    void Function(AdapterResponse<int>)? onComplete,
  }) async {

    try {
    final json = await _channel.invokeMethod('notDoFooBar');
      final value = json.toInt();
      final AdapterResponse<int> response = 
          AdapterResponse.success(value);

      if(caller.mounted) {
        onComplete?.call(response);      
          onSuccess?.call(value);
      }

      return response;
      
    } catch (e) {
      
      final exception = e is Error 
          ? Exception(e.stackTrace) 
          : e as Exception;
      
      final AdapterResponse<int> response = 
          AdapterResponse.failure(exception);

      if(caller.mounted) {
        onComplete?.call(response);
        onFailure?.call(exception);
      }

      return response;
    }
  }

  static Future<AdapterResponse<List<Complex>>> complexityGetter(State caller, {
    void Function(List<Complex>)? onSuccess,
    void Function(Exception)? onFailure,
    void Function()? onNullValue,
    void Function(AdapterResponse<List<Complex>>)? onComplete,
  }) async {

    try {
         
               final jsonResponse = await _channel.invokeMethod('complexityGetter');
      final json = jsonDecode(jsonResponse);
      final value = List<Complex>.from(json.map((o) => Complex.fromJson(o)));
      final AdapterResponse<List<Complex>> response = 
          AdapterResponse.success(value);

      if(caller.mounted) {
        onComplete?.call(response);      
          onSuccess?.call(value);
      }

      return response;
      
    } catch (e) {
      
      final exception = e is Error 
          ? Exception(e.stackTrace) 
          : e as Exception;
      
      final AdapterResponse<List<Complex>> response = 
          AdapterResponse.failure(exception);

      if(caller.mounted) {
        onComplete?.call(response);
        onFailure?.call(exception);
      }

      return response;
    }
  }

}"""


