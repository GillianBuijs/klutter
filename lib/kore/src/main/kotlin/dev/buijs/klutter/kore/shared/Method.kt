/* Copyright (c) 2021 - 2022 Buijs Software
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

package dev.buijs.klutter.kore.shared

import dev.buijs.klutter.kore.ast.AbstractType
import dev.buijs.klutter.kore.ast.StandardTypeMap
import dev.buijs.klutter.kore.project.Pubspec

/**
 * Data class to contain information about analyzed Kotlin (Platform) code
 * which is used to generate Dart code in the Flutter lib folder.
 */
data class Method(

    /**
     * The command to execute a method-channel method.
     *
     * In the following example 'greeting' is the command:
     *
     * ```
     * static Future<AdapterResponse<String>> get greeting async {
     *  ...
     * }
     * ```
     */
    val command: String,

    /**
     * The full import statement as required in Android to call a platform method.
     */
    val import: String,

    /**
     * The actual platform method signature to be executed.
     *
     * In the following example 'greeting()' is the method:
     *
     * ```
     * override fun onMethodCall(@NonNull call: MethodCall, @NonNull result: Result) {
     *    mainScope.launch {
     *      when (call.method) {
     *         "greeting" -> {
     *              result.success(Greeting().greeting())
     *          }
     *          else -> result.notImplemented()
     *      }
     *   }
     *}
     * ```
     */
    val method: String,

    /**
     * [Boolean] value indicating a method to be called is asynchronous or not.
     *
     * Asynchronous code requires more boilerplate code to be generated by Klutter.
     */
    val async: Boolean = false,

    /**
     * The type of data returned when calling the [method].
     *
     * Can be a standard Kotlin/Dart type as defined in [StandardTypeMap]
     * or a custom defined type.
     */
    val responseDataType: AbstractType,

    /**
     * The type of data consumed when calling the [method].
     *
     * Can be a standard Kotlin/Dart type as defined in [StandardTypeMap]
     * or a custom defined type.
     */
    val requestDataType: AbstractType? = null,

    /**
     * Name of the request parameter (if any).
     */
    val requestParameterName: String? = null,
)

/**
 * The method-channel name which uses the package name
 * defined in the pubspec.yaml or
 * defaults to <plugin-name>.klutter if not present.
 */
fun Pubspec.toChannelName(): String =
    android?.pluginPackage ?: "$name.klutter"