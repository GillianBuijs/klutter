package dev.buijs.klutter.plugins.gradle.tasks.adapter.flutter

import dev.buijs.klutter.core.Android
import dev.buijs.klutter.core.Root
import dev.buijs.klutter.plugins.gradle.dsl.KlutterRepository
import dev.buijs.klutter.plugins.gradle.tasks.adapter.flutter.AndroidBuildGradleGenerator
import io.kotlintest.shouldBe
import io.kotlintest.shouldNotBe
import io.kotlintest.specs.WordSpec
import java.nio.file.Files
import kotlin.io.path.createDirectories

/**
 * @author Gillian Buijs
 */
class AndroidRootBuildGradleGeneratorTest: WordSpec({

    val d = "$"

    "Using the AndroidBuildGradleGenerator" should {
        "create a valid and fully configured android build.gradle file" {
            val projectDir = Files.createTempDirectory("")
            projectDir.createDirectories()

            val androidAppDir = projectDir.resolve("flutter/android/app").toAbsolutePath()
            androidAppDir.createDirectories()

            val flutterDir = projectDir.resolve("flutter/lib").toAbsolutePath()
            flutterDir.createDirectories()

            val klutterDir = projectDir.resolve(".klutter").toAbsolutePath().toFile()
            klutterDir.mkdirs()

            val properties = klutterDir.resolve("klutter.properties")
            properties.createNewFile()
            properties.writeText("""
                |kotlin.version=1.6.0
                |android.sdk.compile=31
                |android.sdk.minimum=21
                |android.sdk.target=31
                |app.version.name=1.0.1
                |app.id=dev.buijs.klutter.example
                |app.version.code=2
                |gradle.version=7.0.4
                |flutter.sdk.location="Users/Foo/Bar/flutter/bin"
                |klutter.annotations.kmp.version=0.2.49
                |kotlinx.version=1.3.2
            """.trimMargin())

            val root = Root(projectDir.toFile())
            val sut = AndroidRootBuildGradleGenerator(
                root,
                Android(androidAppDir.toFile(), root),
                listOf(KlutterRepository(
                    url = "foo.url",
                    username = "foo.user",
                    password = "foo.pass"
                ))
            )

            val logging = sut.generate()

            logging.messages().size shouldNotBe 0

            val generatedGradleFile = androidAppDir.resolve("build.gradle").toFile()
            generatedGradleFile.exists() shouldBe true

            generatedGradleFile.readText().filter{ !it.isWhitespace() } shouldBe """
                    // Autogenerated by Klutter
                    // Do not edit directly
                    // Do not check into VCS
                    // See also: https://buijs.dev/klutter
                    buildscript {
                    
                        // Do not edit directly! Source of value is klutter.yaml.
                        ext.kotlin_version = "1.6.0"
                        repositories {
                            google()
                            mavenCentral()
                        }
                    
                        // Do not edit directly! Source of value is klutter.yaml.
                        dependencies {
                            classpath "com.android.tools.build:gradle:7.0.4"
                            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.0"
                        }
                    }
                    
                    allprojects {
                        def kProps = new Properties()
                        new File(project.projectDir, ".klutter/klutter.properties")
                                .getCanonicalFile()
                                .withReader('UTF-8') { reader -> kProps.load(reader)}
                        
                        repositories {
                            google()
                            mavenCentral()
                            maven {
                                url = uri(kProps.getProperty('foo.url'))
                                credentials {
                                    username = kProps.getProperty('foo.user')
                                    password = kProps.getProperty('foo.pass')
                                }
                            }
                        }
                    }
                    
                    rootProject.buildDir = '../build'
                    subprojects {
                        project.buildDir = "$d{rootProject.buildDir}/$d{project.name}"
                        project.evaluationDependsOn(':app')
                    }
                    
                    task clean(type: Delete) {
                        delete rootProject.buildDir
                    }
       
                """.filter { !it.isWhitespace() }
        }

    }
})

