package dev.buijs.klutter.gradle.tasks.adapter.dart


import dev.buijs.klutter.core.*
import dev.buijs.klutter.plugins.gradle.tasks.adapter.dart.DartGenerator
import io.kotlintest.shouldBe
import io.kotlintest.specs.WordSpec
import kotlin.io.path.createDirectories
import kotlin.io.path.createTempDirectory

/**
 * @author Gillian Buijs
 */
class DartGeneratorTest: WordSpec({

    val projectDir = createTempDirectory("").also {
        it.createDirectories()
    }

    val flutterDir = projectDir.resolve("lib").toFile().also {
        it.mkdir()
    }

    "When using the DartGenerator" should {
        "It should write a valid Dart file" {

            //Given: A DartObject
            val objects = DartObjects(
                messages = listOf(
                    DartMessage(
                        name = "Shazaam",
                        fields = listOf(
                            DartField(
                                name = "age",
                                dataType = DartKotlinMap.INTEGER.dartType,
                                optional = false,
                                isList = false,
                            ),
                            DartField(
                                name = "friends",
                                dataType = DartKotlinMap.INTEGER.dartType,
                                optional = true,
                                isList = false,
                            ),
                            DartField(
                                name = "bff",
                                dataType = DartKotlinMap.STRING.dartType,
                                optional = true,
                                isList = false,
                            ),
                            DartField(
                                name = "powers",
                                dataType = "",
                                customDataType = "Power",
                                optional = false,
                                isList = true,
                            ),
                        )
                    )
                ),
                enumerations = listOf(
                    DartEnum(
                        name = "Power",
                        values = listOf(
                            "SUPER_STRENGTH",
                            "SUPER_FUNNY"
                        )
                    )
                )
            )

            //And: A DartGenerator
            val generator = DartGenerator(
                flutter = Flutter(
                    file = flutterDir,
                    root = Root(file = projectDir.toFile())
                ),
                objects = objects
            )

            //When:
            generator.generate()

            //Then:
            val actual = flutterDir.resolve("generated/messages.Dart").also {
                it.exists()
            }

            actual.readText().filter { !it.isWhitespace() } shouldBe """
                    // Autogenerated by Klutter
                    // Do net edit directly, 
                    // but recommended to store in VCS.
                    
                    class Shazaam {
                      
                      Shazaam({
                        required this.age,
                        required this.powers,
                        this.friends,
                        this.bff,
                      });
                      
                     factory Shazaam.fromJson(dynamic json) {
                       return Shazaam (
                         age: json['age'],
                         friends: json['friends'],
                         bff: json['bff'],
                         powers: List<Power>.from(json.decode(json['powers']).map((o) => _Power.parse(o))),
                       );
                     }
                    
                     final int age;
                     final List<Power> powers;
                     int? friends;
                     String? bff;
                    
                     Map<String, dynamic> toJson() {
                       return {
                         'age': age,
                         'friends': friends,
                         'bff': bff,
                         'powers': powers.map((o) => o.toJson()).toList()
                       };
                     }  
                    }
                    
                    enum Power {
                      superStrength,
                      superFunny,
                      none
                    }
                    
                    
                    extension _Power on Power {
                    
                      static Power parse(String value) {
                        switch(value) {
                          case "SUPER_STRENGTH": return Power.superStrength;
                          case "SUPER_FUNNY": return Power.superFunny;
                          default: return Power.none;
                        }
                     }
                    
                      String? toJson() {
                        switch(this) { 
                          case Power.superStrength: return "SUPER_STRENGTH";
                          case Power.superFunny: return "SUPER_FUNNY";
                          default: return null;
                        }
                      }
                    
                    }

            """.filter { !it.isWhitespace() }

        }
    }


})