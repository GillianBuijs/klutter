package dev.buijs.klutter.core.flutter

import dev.buijs.klutter.core.*
import java.io.File

/**
 * @author Gillian Buijs
 * @contact https://buijs.dev
 */
internal class IosPodFileGenerator(
    private val iosVersion: String,
    private val ios: IOS,
    private val kmp: KMP,
    private val podName: String
) : KlutterFileGenerator() {

    override fun generate() = writer().write()

    override fun printer() = IosPodFilePrinter(iosVersion, ios.file, kmp.module(), podName)

    override fun writer() = IosPodFileWriter(ios.file, printer().print())

}

internal class IosPodFilePrinter(
    private val iosVersion: String,
    private val iosDirectory: File,
    private val kmpModuleDirectory: File,
    private val podName: String,
): KlutterPrinter {

    override fun print() = """
            |# File generated by Klutter Framework.
            |# Do not edit directly!
            |
            |platform :ios, '$iosVersion'
            |
            |# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
            |ENV['COCOAPODS_DISABLE_STATS'] = 'true'
            |            
            |project 'Runner', {
            |  'Debug' => :debug,
            |  'Profile' => :release,
            |  'Release' => :release,
            |}
            |
            |def flutter_root
            |  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            |  unless File.exist?(generated_xcode_build_settings_path)
            |    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            |  end
            |
            | File.foreach(generated_xcode_build_settings_path) do |line|
            |    matches = line.match(/FLUTTER_ROOT\=(.*)/)
            |    return matches[1].strip if matches
            |  end
            |  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
            |end
            |
            |require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
            |
            |flutter_ios_podfile_setup
            |
            |target 'Runner' do
            |  use_frameworks!
            |  use_modular_headers!
            |
            |  pod '$podName', :path => '${kmpModuleDirectory.relativeTo(iosDirectory)}'
            |
            |  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            |end
            |
            |post_install do |installer|
            |  installer.pods_project.targets.each do |target|
            |    flutter_additional_ios_build_settings(target)
            |  end
            |  #do this otherwise the kmp module cant be used by flutter in simulator
            |  installer.pods_project.targets.each do |t|
            |        t.build_configurations.each do |c|
            |            c.build_settings['ARCHS[sdk=iphonesimulator*]'] =  `uname -m`
            |        end
            |    end
            |end
            """.trimMargin()
}

internal class IosPodFileWriter(val file: File, val content: String): KlutterWriter {

    override fun write(): KlutterLogger {

        val logger = KlutterLogger()

        if(!file.exists()){
            throw KlutterCodeGenerationException("Path does not exist: $file")
        }

        val podFile = file.resolve("PodFile")

        if(podFile.exists()) {
            podFile.delete().also {
                logger.info("Deleted existing PodFile: $it")
            }
        }

        podFile.createNewFile().also {
            if(!podFile.exists()){
                throw KlutterCodeGenerationException("Unable to create file: $podFile.")
            } else logger.info("Created new PodFile: $podFile")
        }

        podFile.writeText(content).also {
            logger.debug("Written content to PodFile: \r\n$content")
        }

        return logger
    }

}