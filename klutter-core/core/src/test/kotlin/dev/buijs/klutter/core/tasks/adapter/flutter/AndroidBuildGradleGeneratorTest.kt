package dev.buijs.klutter.core.tasks.adapter.flutter

import dev.buijs.klutter.core.Android
import dev.buijs.klutter.core.Root
import io.kotlintest.shouldBe
import io.kotlintest.specs.WordSpec
import java.nio.file.Files
import kotlin.io.path.createDirectories

/**
 * @author Gillian Buijs
 */
class AndroidBuildGradleGeneratorTest: WordSpec({

    "Using the AndroidBuildGradleGenerator" should {
        "create a valid and fully configured android build.gradle file" {
            val projectDir = Files.createTempDirectory("")
            projectDir.createDirectories()

            val androidDir = projectDir.resolve("flutter/android/").toAbsolutePath()
            androidDir.createDirectories()

            val androidAppDir = projectDir.resolve("flutter/android/app").toAbsolutePath()
            androidAppDir.createDirectories()

            val flutterDir = projectDir.resolve("flutter/lib").toAbsolutePath()
            flutterDir.createDirectories()

            val klutterDir = projectDir.resolve(".klutter").toAbsolutePath().toFile()
            klutterDir.mkdirs()

            val sut = AndroidBuildGradleGenerator(
                Android(
                    file = androidDir.toFile(),
                    root = Root(projectDir.toFile()),
                ),
            )

            sut.generate()

            val dollar = "$"
            val generatedGradleFile = androidAppDir.resolve("build.gradle").toFile()
            generatedGradleFile.exists() shouldBe true
            generatedGradleFile.readText().filter { !it.isWhitespace() }  shouldBe """
                // Autogenerated by Klutter
                // Do not edit directly
                // See: https://buijs.dev/klutter
                
                import dev.buijs.klutter.core.*
                
                def localProperties = new Properties()
                def localPropertiesFile = rootProject.file('local.properties')
                if (localPropertiesFile.exists()) {
                    localPropertiesFile.withReader('UTF-8') { reader ->
                        localProperties.load(reader)
                    }
                }
                
                def flutterRoot = localProperties.getProperty('flutter.sdk')
                if (flutterRoot == null) {
                    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
                }
                
                def klutterGradleFile = new File("$dollar{projectDir}/../../klutter.gradle")
                if (!klutterGradleFile.exists()) {
                    throw new GradleException("File not found ${dollar}klutterGradleFile")
                }
                
                apply plugin: 'com.android.application'
                apply plugin: 'kotlin-android'
                apply from: "${dollar}flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
                apply from: "${dollar}klutterGradleFile"
                
                def secrets = Klutter.secrets(project)
                
                android {
                    compileSdkVersion project.ext["androidCompileSdk"].toInteger()
                
                    compileOptions {
                        sourceCompatibility JavaVersion.VERSION_1_8
                        targetCompatibility JavaVersion.VERSION_1_8
                    }
                
                    kotlinOptions {
                        jvmTarget = '1.8'
                    }
                
                    sourceSets {
                        main.java.srcDirs += 'src/main/kotlin'
                    }
                
                    defaultConfig {
                       applicationId project.ext["applicationId"]
                       minSdkVersion project.ext["androidMinSdk"].toInteger()
                       targetSdkVersion project.ext["androidTargetSdk"].toInteger()
                       versionCode project.ext["appVersionCode"].toInteger()
                       versionName project.ext["appVersionName"]
                    }
                
                    signingConfigs {
                        release {
                           storeFile file(secrets.get("store.file.uri") ?: project.projectDir)
                           storePassword secrets.get("store.password") ?: ""
                           keyAlias secrets.get("key.alias") ?: ""
                           keyPassword secrets.get("key.password") ?: ""
                        }
                    }
                
                    buildTypes {
                
                        release {
                            minifyEnabled true
                            signingConfig signingConfigs.release
                        }
                
                        debug {
                            signingConfig signingConfigs.debug
                            debuggable true
                        }
                
                    }
                }
                
                flutter {
                    source '../..'
                }
                
                dependencies {
                    runtimeOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:$dollar{project.ext["kotlinxVersion"]}"
                    implementation project(":platform")
                    implementation "dev.buijs.klutter:core:$dollar{project.ext["klutterVersion"]}"
                }
                """.filter { !it.isWhitespace() }
        }
    }
})