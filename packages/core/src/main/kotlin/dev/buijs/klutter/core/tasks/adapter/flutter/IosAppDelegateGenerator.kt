/* Copyright (c) 2021 - 2022 Buijs Software
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

package dev.buijs.klutter.core.tasks.adapter.flutter


import dev.buijs.klutter.core.*
import dev.buijs.klutter.core.tasks.shared.printMethod
import org.gradle.api.logging.Logging
import java.io.File

/**
 * @author Gillian Buijs
 */
internal class IosAppDelegateGenerator(
    private val methods: List<MethodCallDefinition>,
    private val ios: IOS,
    private val podName: String
) : KlutterFileGenerator() {

    override fun generate() = writer().write()

    override fun printer() = IosAppDelegatePrinter(methods, podName)

    override fun writer() = IosAppDelegateWriter(ios.appDelegate(), printer().print())

}

/**
 * @author Gillian Buijs
 */
internal class IosAppDelegatePrinter(
    private val definitions: List<MethodCallDefinition>,
    private val podName: String,
): KlutterPrinter {

    override fun print() = """
        |//File generated by Klutter Framework.
        |//Do not edit directly!
        |
        |import UIKit
        |import Flutter
        |import $podName
        |
        |@UIApplicationMain
        |@objc class AppDelegate: FlutterAppDelegate {
        |  override func application(
        |    _ application: UIApplication,
        |    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
        |  ) -> Bool {
        |  
        |    GeneratedPluginRegistrant.register(with: self)
        |
        |    let channelName = "KLUTTER"
        |    let rootViewController = window?.rootViewController as! FlutterBinaryMessenger
        |    let methodChannel = FlutterMethodChannel(name: channelName, binaryMessenger: rootViewController)
        |
        |    methodChannel.setMethodCallHandler {(call: FlutterMethodCall, result: @escaping FlutterResult) -> Void in
        |    
        |        switch call.method {
        |${blocks()}
        |        default:
        |            result(FlutterMethodNotImplemented)
        |        }
        |
        |    }
        |    
        |    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
        |    
        |  }
        |  
        |${methods()}  
        |
        |}
        """.trimMargin()

    private fun blocks() = definitions.joinToString("\n") {
        "        case \"${it.getter}\":\n            self.${it.getter}(result: result)"
    }

    private fun methods(): String {
        return definitions.joinToString("\n\n") { printMethod(it) }
    }

}

/**
 * @author Gillian Buijs
 */
internal class IosAppDelegateWriter(val file: File, val content: String): KlutterWriter {

    private val log = Logging.getLogger(IosAppDelegateWriter::class.java)

    override fun write() {

        if(file.exists()){
            file.delete()
        }

        file.createNewFile().also {
            if(!file.exists()){
                throw KlutterCodeGenerationException("Unable to create file: $file.")
            } else log.info("Created new AppDelegate.swift: $file")
        }

        file.writeText(content).also {
            log.debug("Written content to AppDelegate.swfit: \r\n$content")
        }

    }

}

