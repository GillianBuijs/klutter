package dev.buijs.klutter.core

import spock.lang.Specification

import java.nio.file.Files

class DartCodeGeneratorSpec extends Specification {

    private def static projectDir = Files.createTempDirectory("")
    private def static flutterDir = projectDir.resolve("lib").toFile()

    static {
        flutterDir.mkdirs()
    }

    def "The DartCodeGenerator should write a valid Dart file"() {

        given:
        def objects = new DartObjects(
                [new DartMessage("Shazaam", [
                        new DartField( DartKotlinMap.INTEGER.dartType, "age",false, false, null),
                        new DartField( DartKotlinMap.INTEGER.dartType, "friends",true, false, null),
                        new DartField(DartKotlinMap.STRING.dartType, "bff", true, false, null),
                        new DartField("", "powers", false, true, "Power")
                ])],
                [new DartEnum("Power", ["SUPER_STRENGTH", "SUPER_FUNNY"], [])]
        )

        when:
        new DartCodeGenerator(flutterDir, objects).generate()

        then:
        def actual = new File("$flutterDir.path/generated/messages.Dart")

        and:
        actual.exists()
        actual.text.replaceAll(" ", "").replaceAll("\n", "") == """
                /// Autogenerated by Klutter
                /// Do net edit directly,
                /// but recommended to store in VCS.
                
                class Shazaam {
                
                  Shazaam({
                    required this.age,
                    required this.powers,
                    this.friends,
                    this.bff,
                  });
                
                factory Shazaam.fromJson(dynamic json) {
                   return Shazaam (
                     age: json['age'].toInt(),
                     friends: json['friends']?.toInt(),
                     bff: json['bff']?.toString(),
                     powers: List<Power>.from(json['powers'].map((o) => Power.fromJson(o))),
                   );
                 }
                
                 final int age;
                 final List<Power> powers;
                 int? friends;
                 String? bff;
                
                 Map<String, dynamic> toJson() {
                   return {
                     'age': age,
                     'friends': friends,
                     'bff': bff,
                     'powers': powers.map((o) => o.toJson()).toList()
                   };
                 }
                }
                
                class Power {
                final String string;
                
                const Power._(this.string);  static const superStrength = Power._('SUPER_STRENGTH');
                  static const superFunny = Power._('SUPER_FUNNY');
                  static const none = Power._('none');
                
                
                static const values = [superStrength,superFunny];
                
                  @override
                  String toString() {
                    return 'Power.\$string';
                  }
                
                  static Power fromJson(String value) {
                    switch(value) {
                      case "SUPER_STRENGTH": return Power.superStrength;
                      case "SUPER_FUNNY": return Power.superFunny;
                      default: return Power.none;
                    }
                 }
                
                  String? toJson() {
                    switch(this) {
                      case Power.superStrength: return "SUPER_STRENGTH";
                      case Power.superFunny: return "SUPER_FUNNY";
                      default: return null;
                    }
                  }
                }
            """.replaceAll(" ", "").replaceAll("\n", "")
    }

}

//                /// but recommended to store in VCS.
//
//                class Shazaam {
//
//                  Shazaam({
//                    required this.aString,
//                    required this.dBoolean,
//                    this.bInt,
//                    this.cDouble,
//                  });
//
//                factory Shazaam.fromJson(dynamic json) {
//                   return Shazaam (
//                     aString: json['aString'].toString(),
//                     bInt: json['bInt']?.toInt(),
//                     cDouble: json['cDouble'] == null ? [] : List<double>.from(json['cDouble']?.map((o) => o.toDouble())),
//                     dBoolean: List<bool>.from(json['dBoolean'].map((o) => o)),
//                   );
//                 }
//
//                 final String aString;
//                 final List<bool> dBoolean;
//                 int? bInt;
//                 List<double>? cDouble;
//
//                 Map<String, dynamic> toJson() {
//                   return {
//                     'aString': aString,
//                     'bInt': bInt,
//                     'cDouble': cDouble.toList(),
//                     'dBoolean': dBoolean.toList()
//                   };
//                 }
//                }
//            """.filter { !it.isWhitespace() }
//
//        }
//
//    }
//
//
//})
