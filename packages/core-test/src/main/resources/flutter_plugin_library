import 'dart:async';
import 'package:flutter/services.dart';

/// Autogenerated by Klutter Framework.
///
/// Do net edit directly, but recommended to store in VCS.
///
/// Adapter class which handles communication with the KMP library.
class SuperAwesome {
  static const MethodChannel _channel = MethodChannel('foo.bar.super_awesome');

  static Future<AdapterResponse<String>> get DartMaul async {
    try {
      final json = await _channel.invokeMethod('DartMaul');
      return AdapterResponse.success(json.toString());
    } catch (e) {
      return AdapterResponse.failure(
          e is Error ? Exception(e.stackTrace) : e as Exception
      );
    }
  }

  static Future<AdapterResponse<List<String>>> get BabyYoda async {
    try {
      final response = await _channel.invokeMethod('BabyYoda');
      final json = jsonDecode(response);
      return AdapterResponse.success(List<String>.from(json.map((o) => o.toString())));
    } catch (e) {
      return AdapterResponse.failure(
          e is Error ? Exception(e.stackTrace) : e as Exception
      );
    }
  }

  static Future<AdapterResponse<List<String>=listOf(foo()).map>> get ObiWan async {
    try {
      final response = await _channel.invokeMethod('ObiWan');
      final json = jsonDecode(response);
      return AdapterResponse.success(List<String>.from(json.map((o) => o.toString())));
    } catch (e) {
      return AdapterResponse.failure(
          e is Error ? Exception(e.stackTrace) : e as Exception
      );
    }
  }

}

/// Autogenerated by Klutter Framework.
///
/// Do net edit directly, but recommended to store in VCS.
///
/// Wraps an [exception] if calling the platform method has failed to be logged by the consumer.
/// Or wraps an [object] of type T when platform method has returned a response and
/// deserialization was successful.
class AdapterResponse<T> {

  AdapterResponse(this._object, this._exception);

  factory AdapterResponse.success(T t) => AdapterResponse(t, null);

  factory AdapterResponse.failure(Exception e) => AdapterResponse(null, e);

  ///The actual object to returned
  T? _object;
  set object(T object) => _object = object;
  T get object => _object!;

  ///Exception which occurred when calling a platform method failed.
  Exception? _exception;
  set exception(Exception e) => _exception = e;
  Exception get exception => _exception!;

  bool isSuccess() {
    return _object != null;
  }

}